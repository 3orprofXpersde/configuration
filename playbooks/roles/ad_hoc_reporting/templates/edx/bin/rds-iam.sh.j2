#!/usr/bin/env bash

unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SECURITY_TOKEN AWS_SESSION_TOKEN

{% if COMMON_DEPLOYMENT == 'edge' %}
ROLE_ARN={{ RDS_IAM_AUTHENTICATION_ROLE_ARN }}
RESULT=(`aws sts assume-role --role-arn $ROLE_ARN \
            --role-session-name rds_read_only_iam \
            --query '[Credentials.AccessKeyId,Credentials.SecretAccessKey,Credentials.SessionToken]' \
            --output text`)
export AWS_ACCESS_KEY_ID=${RESULT[0]}
export AWS_SECRET_ACCESS_KEY=${RESULT[1]}
export AWS_SECURITY_TOKEN=${RESULT[2]}
export AWS_SESSION_TOKEN=${AWS_SECURITY_TOKEN}
{% endif %}

TOKEN="$(aws rds generate-db-auth-token --hostname {{ item.db_host }} --port 3306 --region us-east-1 --username {{ COMMON_MYSQL_READ_ONLY_USER }} )"

if [[ "$1" == "generate-db-auth-token" ]]; then
    echo $TOKEN
elif [[  -z "$1" ]]; then
    mysql -u {{ COMMON_MYSQL_READ_ONLY_USER }} -h {{ item.db_host }} --enable-cleartext-plugin --ssl-ca=/edx/bin/rds-ca-2015-root.pem --password=$TOKEN {{ item.db_name }}
else
    echo "USAGE:"
    echo "  Generates an auth token:"
    echo "       /edx/bin/db_iam_auth_script generate-db-auth-token"
    echo "  Connect to a db with IAM auth token:"
    echo "       /edx/bin/db_iam_auth_script" 
fi
